//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\XBO4\Desktop\FindFileByMask\newFindFile\Source\FindFile\Mask.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FindFile {

	using System;
	using System.Text;
	using System.Text.RegularExpressions;
	using FindFile;
	using System.IO;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MaskLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, EQUAL_SIGN=13, EQUAL_SIGN_1=14, EQUAL_SIGN_2=15, 
		NAME_SYMBOLS=16, LENGTH_SYMBOLS=17, LENGTH_SYMBOLS_1=18, LENGTH_SYMBOLS_2=19, 
		CONTENT_SYMBOLS=20, NEWLINE=21;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "EQUAL_SIGN", "EQUAL_SIGN_1", "EQUAL_SIGN_2", 
		"NAME_SYMBOLS", "LENGTH_SYMBOLS", "LENGTH_SYMBOLS_1", "LENGTH_SYMBOLS_2", 
		"CONTENT_SYMBOLS", "NEWLINE"
	};


		String NAME	= Path.GetFileName(MaskHandler.currentFile.GetName());
	    UInt64 LENGTH = MaskHandler.currentFile.GetLength();
	    String CONTENT = MaskHandler.currentFile.GetContent();
		bool IfFitsToNamemask(String Name, String Mask)
		{
			Regex mask = new Regex(Mask.Replace(".", "[.]").Replace("*", ".*").Replace("?", "."));
			return mask.IsMatch(Name);
		}


	public MaskLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'&'", "'|'", "'^'", "' '", "'('", "')'", "'Name'", "'='", "'''", 
		"'~'", "'Length'", "'Content'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "EQUAL_SIGN", "EQUAL_SIGN_1", "EQUAL_SIGN_2", "NAME_SYMBOLS", "LENGTH_SYMBOLS", 
		"LENGTH_SYMBOLS_1", "LENGTH_SYMBOLS_2", "CONTENT_SYMBOLS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mask.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x17\x95\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xEY\n\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF`\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10g\n"+
		"\x10\x3\x11\x6\x11j\n\x11\r\x11\xE\x11k\x3\x11\x3\x11\x6\x11p\n\x11\r"+
		"\x11\xE\x11q\x3\x12\x6\x12u\n\x12\r\x12\xE\x12v\x3\x12\x5\x12z\n\x12\x3"+
		"\x13\x6\x13}\n\x13\r\x13\xE\x13~\x3\x13\x5\x13\x82\n\x13\x3\x14\x6\x14"+
		"\x85\n\x14\r\x14\xE\x14\x86\x3\x14\x5\x14\x8A\n\x14\x3\x15\x6\x15\x8D"+
		"\n\x15\r\x15\xE\x15\x8E\x3\x16\x5\x16\x92\n\x16\x3\x16\x3\x16\x2\x2\x2"+
		"\x17\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n"+
		"\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11"+
		"!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17\x3\x2\x6\x4\x2>>@@\a"+
		"\x2,,\x32;\x41\x41\x43\\\x63|\b\x2IIMMOOiimmoo\b\x2,,\x30\x30\x32;\x41"+
		"\x41\x43\\\x63|\xA4\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2"+
		"\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2"+
		"\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'"+
		"\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x3-\x3\x2\x2\x2\x5/\x3\x2"+
		"\x2\x2\a\x31\x3\x2\x2\x2\t\x33\x3\x2\x2\x2\v\x35\x3\x2\x2\x2\r\x37\x3"+
		"\x2\x2\x2\xF\x39\x3\x2\x2\x2\x11>\x3\x2\x2\x2\x13@\x3\x2\x2\x2\x15\x42"+
		"\x3\x2\x2\x2\x17\x44\x3\x2\x2\x2\x19K\x3\x2\x2\x2\x1BX\x3\x2\x2\x2\x1D"+
		"_\x3\x2\x2\x2\x1F\x66\x3\x2\x2\x2!i\x3\x2\x2\x2#t\x3\x2\x2\x2%|\x3\x2"+
		"\x2\x2\'\x84\x3\x2\x2\x2)\x8C\x3\x2\x2\x2+\x91\x3\x2\x2\x2-.\a(\x2\x2"+
		".\x4\x3\x2\x2\x2/\x30\a~\x2\x2\x30\x6\x3\x2\x2\x2\x31\x32\a`\x2\x2\x32"+
		"\b\x3\x2\x2\x2\x33\x34\a\"\x2\x2\x34\n\x3\x2\x2\x2\x35\x36\a*\x2\x2\x36"+
		"\f\x3\x2\x2\x2\x37\x38\a+\x2\x2\x38\xE\x3\x2\x2\x2\x39:\aP\x2\x2:;\a\x63"+
		"\x2\x2;<\ao\x2\x2<=\ag\x2\x2=\x10\x3\x2\x2\x2>?\a?\x2\x2?\x12\x3\x2\x2"+
		"\x2@\x41\a)\x2\x2\x41\x14\x3\x2\x2\x2\x42\x43\a\x80\x2\x2\x43\x16\x3\x2"+
		"\x2\x2\x44\x45\aN\x2\x2\x45\x46\ag\x2\x2\x46G\ap\x2\x2GH\ai\x2\x2HI\a"+
		"v\x2\x2IJ\aj\x2\x2J\x18\x3\x2\x2\x2KL\a\x45\x2\x2LM\aq\x2\x2MN\ap\x2\x2"+
		"NO\av\x2\x2OP\ag\x2\x2PQ\ap\x2\x2QR\av\x2\x2R\x1A\x3\x2\x2\x2SY\x4>@\x2"+
		"TU\a>\x2\x2UY\a?\x2\x2VW\a@\x2\x2WY\a?\x2\x2XS\x3\x2\x2\x2XT\x3\x2\x2"+
		"\x2XV\x3\x2\x2\x2Y\x1C\x3\x2\x2\x2Z`\t\x2\x2\x2[\\\a>\x2\x2\\`\a?\x2\x2"+
		"]^\a@\x2\x2^`\a?\x2\x2_Z\x3\x2\x2\x2_[\x3\x2\x2\x2_]\x3\x2\x2\x2`\x1E"+
		"\x3\x2\x2\x2\x61g\t\x2\x2\x2\x62\x63\a>\x2\x2\x63g\a?\x2\x2\x64\x65\a"+
		"@\x2\x2\x65g\a?\x2\x2\x66\x61\x3\x2\x2\x2\x66\x62\x3\x2\x2\x2\x66\x64"+
		"\x3\x2\x2\x2g \x3\x2\x2\x2hj\t\x3\x2\x2ih\x3\x2\x2\x2jk\x3\x2\x2\x2ki"+
		"\x3\x2\x2\x2kl\x3\x2\x2\x2lm\x3\x2\x2\x2mo\a\x30\x2\x2np\t\x3\x2\x2on"+
		"\x3\x2\x2\x2pq\x3\x2\x2\x2qo\x3\x2\x2\x2qr\x3\x2\x2\x2r\"\x3\x2\x2\x2"+
		"su\x4\x32;\x2ts\x3\x2\x2\x2uv\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2"+
		"wy\x3\x2\x2\x2xz\t\x4\x2\x2yx\x3\x2\x2\x2yz\x3\x2\x2\x2z$\x3\x2\x2\x2"+
		"{}\x4\x32;\x2|{\x3\x2\x2\x2}~\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2"+
		"\x2\x7F\x81\x3\x2\x2\x2\x80\x82\t\x4\x2\x2\x81\x80\x3\x2\x2\x2\x81\x82"+
		"\x3\x2\x2\x2\x82&\x3\x2\x2\x2\x83\x85\x4\x32;\x2\x84\x83\x3\x2\x2\x2\x85"+
		"\x86\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x89\x3\x2"+
		"\x2\x2\x88\x8A\t\x4\x2\x2\x89\x88\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A"+
		"(\x3\x2\x2\x2\x8B\x8D\t\x5\x2\x2\x8C\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2"+
		"\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F*\x3\x2\x2\x2\x90\x92\a"+
		"\xF\x2\x2\x91\x90\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2"+
		"\x93\x94\a\f\x2\x2\x94,\x3\x2\x2\x2\x10\x2X_\x66kqvy~\x81\x86\x89\x8E"+
		"\x91\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace FindFile
