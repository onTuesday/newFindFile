//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\User\Desktop\Repos\newFindFile\Source\FindFile\Mask.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FindFile {

	using System;
	using System.Text;
	using System.Text.RegularExpressions;
	using FindFile;
	using System.IO;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MaskLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, EQUAL_SIGN=12, EQUAL_SIGN_1=13, EQUAL_SIGN_2=14, NAME_SYMBOLS=15, 
		LENGTH_SYMBOLS=16, LENGTH_SYMBOLS_1=17, LENGTH_SYMBOLS_2=18, CONTENT_SYMBOLS=19, 
		NEWLINE=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "EQUAL_SIGN", "EQUAL_SIGN_1", "EQUAL_SIGN_2", "NAME_SYMBOLS", 
		"LENGTH_SYMBOLS", "LENGTH_SYMBOLS_1", "LENGTH_SYMBOLS_2", "CONTENT_SYMBOLS", 
		"NEWLINE"
	};


		String NAME	= Path.GetFileName(MaskHandler.currentFile.GetName());
	    UInt64 LENGTH = MaskHandler.currentFile.GetLength();
	    String CONTENT = MaskHandler.currentFile.GetContent();

		bool IfFitsToNamemask(String Name, String Mask)
		{
			Regex mask = new Regex(Mask.Replace(".", "[.]").Replace("*", ".*").Replace("?", "."));
			return mask.IsMatch(Name);
		}


	public MaskLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'&'", "'|'", "'^'", "'('", "')'", "'Name'", "'='", "'''", "'~'", 
		"'Length'", "'Content'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"EQUAL_SIGN", "EQUAL_SIGN_1", "EQUAL_SIGN_2", "NAME_SYMBOLS", "LENGTH_SYMBOLS", 
		"LENGTH_SYMBOLS_1", "LENGTH_SYMBOLS_2", "CONTENT_SYMBOLS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mask.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x16\x91\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x5\rU\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\\\n\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x63\n\xF\x3\x10\x6\x10\x66\n\x10\r\x10"+
		"\xE\x10g\x3\x10\x3\x10\x6\x10l\n\x10\r\x10\xE\x10m\x3\x11\x6\x11q\n\x11"+
		"\r\x11\xE\x11r\x3\x11\x5\x11v\n\x11\x3\x12\x6\x12y\n\x12\r\x12\xE\x12"+
		"z\x3\x12\x5\x12~\n\x12\x3\x13\x6\x13\x81\n\x13\r\x13\xE\x13\x82\x3\x13"+
		"\x5\x13\x86\n\x13\x3\x14\x6\x14\x89\n\x14\r\x14\xE\x14\x8A\x3\x15\x5\x15"+
		"\x8E\n\x15\x3\x15\x3\x15\x2\x2\x2\x16\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6"+
		"\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B"+
		"\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16"+
		"\x3\x2\x6\x4\x2>>@@\a\x2,,\x32;\x41\x41\x43\\\x63|\b\x2IIMMOOiimmoo\b"+
		"\x2,,\x30\x30\x32;\x41\x41\x43\\\x63|\xA0\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2"+
		"\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2"+
		"\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3"+
		"\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2"+
		"\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2"+
		"%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x3+\x3\x2\x2\x2\x5-\x3"+
		"\x2\x2\x2\a/\x3\x2\x2\x2\t\x31\x3\x2\x2\x2\v\x33\x3\x2\x2\x2\r\x35\x3"+
		"\x2\x2\x2\xF:\x3\x2\x2\x2\x11<\x3\x2\x2\x2\x13>\x3\x2\x2\x2\x15@\x3\x2"+
		"\x2\x2\x17G\x3\x2\x2\x2\x19T\x3\x2\x2\x2\x1B[\x3\x2\x2\x2\x1D\x62\x3\x2"+
		"\x2\x2\x1F\x65\x3\x2\x2\x2!p\x3\x2\x2\x2#x\x3\x2\x2\x2%\x80\x3\x2\x2\x2"+
		"\'\x88\x3\x2\x2\x2)\x8D\x3\x2\x2\x2+,\a(\x2\x2,\x4\x3\x2\x2\x2-.\a~\x2"+
		"\x2.\x6\x3\x2\x2\x2/\x30\a`\x2\x2\x30\b\x3\x2\x2\x2\x31\x32\a*\x2\x2\x32"+
		"\n\x3\x2\x2\x2\x33\x34\a+\x2\x2\x34\f\x3\x2\x2\x2\x35\x36\aP\x2\x2\x36"+
		"\x37\a\x63\x2\x2\x37\x38\ao\x2\x2\x38\x39\ag\x2\x2\x39\xE\x3\x2\x2\x2"+
		":;\a?\x2\x2;\x10\x3\x2\x2\x2<=\a)\x2\x2=\x12\x3\x2\x2\x2>?\a\x80\x2\x2"+
		"?\x14\x3\x2\x2\x2@\x41\aN\x2\x2\x41\x42\ag\x2\x2\x42\x43\ap\x2\x2\x43"+
		"\x44\ai\x2\x2\x44\x45\av\x2\x2\x45\x46\aj\x2\x2\x46\x16\x3\x2\x2\x2GH"+
		"\a\x45\x2\x2HI\aq\x2\x2IJ\ap\x2\x2JK\av\x2\x2KL\ag\x2\x2LM\ap\x2\x2MN"+
		"\av\x2\x2N\x18\x3\x2\x2\x2OU\x4>@\x2PQ\a>\x2\x2QU\a?\x2\x2RS\a@\x2\x2"+
		"SU\a?\x2\x2TO\x3\x2\x2\x2TP\x3\x2\x2\x2TR\x3\x2\x2\x2U\x1A\x3\x2\x2\x2"+
		"V\\\t\x2\x2\x2WX\a>\x2\x2X\\\a?\x2\x2YZ\a@\x2\x2Z\\\a?\x2\x2[V\x3\x2\x2"+
		"\x2[W\x3\x2\x2\x2[Y\x3\x2\x2\x2\\\x1C\x3\x2\x2\x2]\x63\t\x2\x2\x2^_\a"+
		">\x2\x2_\x63\a?\x2\x2`\x61\a@\x2\x2\x61\x63\a?\x2\x2\x62]\x3\x2\x2\x2"+
		"\x62^\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x1E\x3\x2\x2\x2\x64\x66\t\x3\x2"+
		"\x2\x65\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2"+
		"hi\x3\x2\x2\x2ik\a\x30\x2\x2jl\t\x3\x2\x2kj\x3\x2\x2\x2lm\x3\x2\x2\x2"+
		"mk\x3\x2\x2\x2mn\x3\x2\x2\x2n \x3\x2\x2\x2oq\x4\x32;\x2po\x3\x2\x2\x2"+
		"qr\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2su\x3\x2\x2\x2tv\t\x4\x2\x2"+
		"ut\x3\x2\x2\x2uv\x3\x2\x2\x2v\"\x3\x2\x2\x2wy\x4\x32;\x2xw\x3\x2\x2\x2"+
		"yz\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|~\t\x4\x2\x2"+
		"}|\x3\x2\x2\x2}~\x3\x2\x2\x2~$\x3\x2\x2\x2\x7F\x81\x4\x32;\x2\x80\x7F"+
		"\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2"+
		"\x2\x83\x85\x3\x2\x2\x2\x84\x86\t\x4\x2\x2\x85\x84\x3\x2\x2\x2\x85\x86"+
		"\x3\x2\x2\x2\x86&\x3\x2\x2\x2\x87\x89\t\x5\x2\x2\x88\x87\x3\x2\x2\x2\x89"+
		"\x8A\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B(\x3\x2\x2"+
		"\x2\x8C\x8E\a\xF\x2\x2\x8D\x8C\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x8F"+
		"\x3\x2\x2\x2\x8F\x90\a\f\x2\x2\x90*\x3\x2\x2\x2\x10\x2T[\x62gmruz}\x82"+
		"\x85\x8A\x8D\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace FindFile
