//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\newFindFile\Source\FindFile\Mask.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FindFile {

	using System;
	using System.Text;
	using System.Text.RegularExpressions;
	using FindFile;
	using System.IO;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMaskListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MaskBaseListener : IMaskListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MaskParser.mask"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMask([NotNull] MaskParser.MaskContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MaskParser.mask"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMask([NotNull] MaskParser.MaskContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MaskParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] MaskParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MaskParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] MaskParser.StatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MaskParser.boolexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolexpr([NotNull] MaskParser.BoolexprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MaskParser.boolexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolexpr([NotNull] MaskParser.BoolexprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MaskParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] MaskParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MaskParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] MaskParser.ExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MaskParser.exprName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprName([NotNull] MaskParser.ExprNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MaskParser.exprName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprName([NotNull] MaskParser.ExprNameContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MaskParser.exprLength"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprLength([NotNull] MaskParser.ExprLengthContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MaskParser.exprLength"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprLength([NotNull] MaskParser.ExprLengthContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MaskParser.exprContent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprContent([NotNull] MaskParser.ExprContentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MaskParser.exprContent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprContent([NotNull] MaskParser.ExprContentContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace FindFile
